
/**
 * Reason
 * Copyright (C) 2009  Emerson Clarke
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
#ifndef SYSTEM_PLATFORM_H
#define SYSTEM_PLATFORM_H

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "reason/reason.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Reason { namespace Platform {

 typedef unsigned char Byte;
 typedef unsigned char Bit8;
 typedef unsigned short Bit16;
 typedef unsigned Bit32;
 typedef unsigned long long Bit64;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class PlatformMessage
{
public:
	PlatformMessage();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Platform
{
public:

	void Error(char * data, int size);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Atomic
{
public:

	static void And();
	static void Or();
	static void Xor();

	static int Cas(volatile int * dest, int prev, int with);
	static int Swp(volatile int * dest, int with);

	static int Add(volatile int * dest, int by);
	static int Sub(volatile int * dest, int by);

	static int Inc(volatile int * dest);
	static int Dec(volatile int * dest);

	static int Mul(volatile int * dest, int by);
	static int Div(volatile int * dest, int by);
	static int Mod(volatile int * dest, int by);

	static void * Cas(volatile void ** dest, void * prev, void * with);
	static void * Swp(volatile void ** dest, void * with);

	static void * Add(volatile void ** dest, void * by);
	static void * Sub(volatile void ** dest, void * by);

	static void * Inc(volatile void ** dest);
	static void * Dec(volatile void ** dest);

	static void * Mul(volatile void ** dest, void * by);
	static void * Div(volatile void ** dest, void * by);
	static void * Mod(volatile void ** dest, void * by);    

	#ifdef REASON_PLATFORM_X86_64

	static long long Cas(volatile long long * dest, long long prev, long long with);
	static long long Swp(volatile long long * dest, long long with);

	static long long Add(volatile long long * dest, long long by);
	static long long Sub(volatile long long * dest, long long by);

	static long long Inc(volatile long long * dest);
	static long long Dec(volatile long long * dest);

	static long long Mul(volatile long long * dest, long long by);
	static long long Div(volatile long long * dest, long long by);
	static long long Mod(volatile long long * dest, long long by);

	#endif

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

