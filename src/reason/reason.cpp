
/**
 * Reason
 * Copyright (C) 2009  Emerson Clarke
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "reason/reason.h"

#define REASON_EXPORT

#ifdef REASON_EXPORT

#include "reason/export.h"

#include "reason/system/string.h"
#include "reason/platform/thread.h"
#include "reason/messaging/callback.h"
#include "reason/system/storage/storage.h"
#include "reason/system/file.h"
#include "reason/system/parser.h"
#include "reason/language/regex/regex.h"
#include "reason/structure/map.h"
#include "reason/structure/set.h"
#include "reason/structure/array.h"
#include "reason/structure/policy.h"

using namespace Reason::Messaging;
using namespace Reason::Platform;
using namespace Reason::System;
using namespace Reason::System::Storage;
using namespace Reason::Language::Regex;
using namespace Reason::Structure;
using namespace Reason::Structure::Policy;
using namespace Reason::Export;

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "reason/reason.h"

#include <stdio.h>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma warning(disable:4530)

#ifdef STDERR_OVERIDE
	FILE* f = NULL;
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{
	OutputConsole("\n\nReason: int main(...)\n");
	for (int a=0;a<argc;++a)
	{
		OutputConsole("Arg%d: %s\n",a,argv[a]);
	}

	#ifdef REASON_EXPORT

	CodeReader reader;
	reader.Read();
	reader.Write();
	reader.Copyright();

	#endif	


	// This is some sample code to show a few basic features of Reason, including
	// Strings, Arrays, Regexes, and Iterators.

	// Read a file into a string, note that the file is automatically
	// opened for reading.
	
	String string;
	File("./src/reason/reason.h").Read(string);
	
	// Match a regular expression on the file to match all macro definitions
	
	Array<String> array;
	
	Regex regex("#(\\w+)");
	
	// Use a limit of 0 to match all occurences of the regex in string.
	regex.Match(0,string);
	for (int m=0;m<regex.Matches.Length();++m)
		array.Insert(regex.Matches[m][1]);
	
	
	// Use a string iterator to iterate the array, note that the array can be changed to a list
	// or some other structure without chaning the iterator code.
	Iterator<String> iterator = array.Iterate();
	
	// We set the direction of the iterator, then move while it has things to iterate.
	for (iterator.Forward();iterator.Has();iterator.Move())
	{
		// Using the function operator () on an Iterator to get the underlying data type
		// which in this case is a String.
	
		// Use the print method on all strings and sequences to return a null terminated
		// string which can be passed to printf like functions.
		
		// The OutputConsole is part of a series of macros which can be used to output printf
		// like data to stdout and stderr with various logging levels.
		OutputConsole("%s\n",iterator().Print());
	
	}


	return 0;

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

