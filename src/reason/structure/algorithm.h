
/**
 * Reason
 * Copyright (C) 2009  Emerson Clarke
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
#ifndef STRUCTURE_ALGORITHM_H
#define STRUCTURE_ALGORITHM_H

#include "reason/structure/array.h"
#include "reason/structure/list.h"
#include "reason/messaging/callback.h"
#include "reason/system/string.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Reason { namespace Structure { namespace Algorithm {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Array<int> Range(int count);
Array<int> Step(Array<int> & array, int count);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename _Kind_>
Superstring Filter(const Callback<bool,_Kind_> & callback, String & string)
{
	Superstring filter;
	char * c = string.Data;
	char * e = string.Data+string.Size;	
	for (;c != e;++c)
		if callback(*c)
			filter.Append(*c);

	return filter;
} 

template<typename _Kind_>
Reason::Structure::Array<_Kind_> Filter(const Callback<bool,_Kind_> & callback, Reason::Structure::Iterable<_Kind_> & iterable)
{
	Reason::Structure::Array<_Kind_> filter;
	Iterator<_Kind_> it = iterable.Iterate();
	for(it.Forward();it.Has();it.Move())
		if (callback(it()))
			filter.Append(it())

	return Reason::Structure::Array<_Kind_>(filter,true);
} 

template<typename _Kind_>
Reason::Structure::List<_Kind_> Filter(const Callback<bool,_Kind_> & callback, Reason::Structure::List<_Kind_> & list)
{

	Reason::Structure::List<_Kind_> filter;
	Iterator<_Kind_> it = list.Iterate();
	for(it.Forward();it.Has();it.Move())
		if (((Callback<bool,_Kind_> &)callback)(it()))
			filter.Append(it());

	return Reason::Structure::List<_Kind_>(filter,true);
} 

template<typename _Return_, typename _Kind_>
Reason::Structure::Array<_Return_> Map(const Callback<_Return_,_Kind_> & callback, Reason::Structure::Iterable<_Kind_> & iterable)
{
	Reason::Structure::Array<_Return_> map;
	Iterator<_Kind_> it = iterable.Iterate();
	for(it.Forward();it.Has();it.Move())
		map.Append(((Callback<_Return_,_Kind_> &)callback)(it()));

	return Reason::Structure::Array<_Return_>(map,true);
}

template<typename _Return_, typename _Kind_>
_Kind_ Reduce(const Callback<_Return_,_Kind_,_Kind_> & callback, Reason::Structure::Iterable<typename Type<_Kind_>::Value> & iterable)
{

	Iterand<typename Type<_Kind_>::Value> it = iterable.Forward();
	_Kind_ value = it();
	++it;
	while (it != 0)
	{
		value = ((Callback<_Return_,_Kind_,_Kind_> &)callback)(value,it());
		++it;
	}

	return value;	

} 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Sort
{
public:

}; 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Reason { namespace Structure { namespace Concept {

}}}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

