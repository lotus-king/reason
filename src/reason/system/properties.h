
/**
 * Reason
 * Copyright (C) 2009  Emerson Clarke
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#ifndef SYSTEM_PROPERTIES_H
#define SYSTEM_PROPERTIES_H

#include "reason/system/path.h"
#include "reason/system/sequence.h"
#include "reason/structure/map.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Reason { namespace System {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Properties : public Reason::Structure::Multimap<String,String>
{
public:

	Properties()
	{

		this->Initial->Base->Compare.Option = Comparable::COMPARE_GENERAL;
	}

	bool Contains(const char * data){return Contains((char*)data,String::Length(data));}
	bool Contains(const Sequence & sequence){return Contains(sequence.Data,sequence.Size);}	
	bool Contains(char * data, int size)
	{

		return Reason::Structure::Multimap<String,String>::Select(String(data,size))!=0;
	}

	String & operator [] (const char * data)
	{
		Substring substring(data);
		return operator [] (substring);
	}

	String & operator [] (const Sequence & sequence) 
	{
		Iterand< Mapped<String,String> > iterand = Select(String(sequence));
		if (iterand)
		{
			return iterand().Value();
		}
		else
		{

			iterand = Reason::Structure::Multimap<String,String>::Insert(sequence);
			OutputAssert(iterand != 0);
			return iterand().Value();
		}

	}
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif